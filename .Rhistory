insurance <- read.csv("~/@python/neo-notebook/data/multiple-linear-regression/insurance.csv")
View(insurance)
str(insurance)
str(insurance)
col(insurance[c('age', 'bmi', 'children', 'expenses')])
col(insurance[c('age', 'bmi', 'children', 'expenses')])
col(insurance[c('age', 'bmi', 'children', 'expenses')])
cor(insurance[c('age', 'bmi', 'children', 'expenses')])
plot(cor(insurance[c('age', 'bmi', 'children', 'expenses')]))
plot(insuranc)
plot(insurance)
insurance$region.unique
insurance$region
regions = insurance$region
unique(regions)
lm(expenses~age+children+bmi+sex+smoker+region, data=insurance)
ins_model = lm(expenses~age+children+bmi+sex+smoker+region, data=insurance)
ins_model
summary(ins_model)
train.data.raw <- read.csv('machine-error02.csv', header = T)
setwd("~/@python/neo-notebook")
train.data.raw <- read.csv('data/exem/machine-error02.csv', header = T)
train.data.raw <- subset(train.data.raw, select = c(1, 3, 4, 5, 6, 7, 8))
data <- train.data.raw
train <- data[1:14000,]
test <- data[14001:14375,]
model = glm(formula=error~., family=binomial(link='logit'), data=train)
fitted.results <- predict(model, newdata=test, type='response')
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
mean(fitted.results == test$error)
train.data.raw <- read.csv('data/exem/machine-error01.csv', header = T)
train.data.raw <- subset(train.data.raw, select = c(1, 3, 4, 5, 6, 7, 8))
data <- train.data.raw
train <- data[1:14000,]
test <- data[14001:14375,]
model = glm(formula=error~., family=binomial(link='logit'), data=train)
fitted.results <- predict(model, newdata=test, type='response')
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
mean(fitted.results == test$error)
head(train.data.raw)
train.data.raw <- subset(train.data.raw, select = -c(2))
train.data.raw <- read.csv('data/exem/machine-error01.csv', header = T)
train.data.raw <- subset(train.data.raw, select = -c(2))
data <- train.data.raw
train <- data[1:14000,]
test <- data[14001:14375,]
model = glm(formula=error~., family=binomial(link='logit'), data=train)
fitted.results <- predict(model, newdata=test, type='response')
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
mean(fitted.results == test$error)
train <- data[1:13000,]
test <- data[13001:14375,]
model = glm(formula=error~., family=binomial(link='logit'), data=train)
fitted.results <- predict(model, newdata=test, type='response')
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
mean(fitted.results == test$error)
fitted.results <- predict(model, newdata=test, type='response')
plot(fitted.results)
fitted.results <- predict(model, newdata=test, type='response')
head(fitted.results)
fitted.results
plot(fitted.results)
plot(fitted.results\)
plot(fitted.results)
plot(fitted.values())
plot(fitted.values
plot(fitted.values)
plot(fitted.values)
plot(fitted.values)
plot(fitted.results)
fitted.results
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
fitted.results
fitted.results <- predict(model, newdata=test, type='response')
plot(fitted.results)
fitted.results > 1
length(fitted.results > 1)
fitted.results[fitted.results > 1]
fitted.results[fitted.results > 1]
fitted.results[fitted.results > 1, ]
fitted.results[fitted.results > 1,]
fitted.results[fitted.results > 1]
fitted.results[fitted.results >= 1]
fitted.results >= 1
fitted.results[fitted.results >= 1]
fitted.results[fitted.results >= 1,]
fitted.results[,fitted.results >= 1]
fitted.results[fitted.results >= 1]
fitted.results[0]
fitted.results[2]
fitted.results[1]
length(fitted.results >= 1)
length(fitted.results > 1)
fitted.results > 1
fitted.results[fitted.results > 1]
fitted.results
model
plot(model)
predict(model, newdata=test[0], type='response')
predict(model, newdata=test[0,], type='response')
predict(model, newdata=test[,], type='response')
predict(model, newdata=test[,0], type='response')
predict(model, newdata=test[1,], type='response')
predict(model, newdata=test[2\,], type='response')
predict(model, newdata=test[2,], type='response')
test[2,]
predict(model, newdata=test[3,], type='response')
test$error == 1
table(test$error == 1)
table(test$error == 1)
predict(model, newdata=test[161,], type='response')
test[161, ]
plot(test$error)
plot(data$error)
test[161, ]
test[161, ]$error
test[162, ]$error
test[163, ]$error
plot(test[163, ])
predict(model, newdata=test[163,], type='response')
predict(model, newdata=test[162,], type='response')
predict(model, newdata=test[162,], type='response')
model
?predict(model, newdata=test[162,], type='response')
predict(model, newdata=test[162,], type='response')
nls
predict(model, newdata=test[162,], type='response')
predict(model, newdata=test[162,], type='response')$value
predict(model, newdata=test[162,], type='response')
d = predict(model, newdata=test[162,], type='response')
d
d[0]
d[1]
typeof(d)
d
d + 1
typeof(d)
d
d
d$
d
floor(d)
d
2.220446e-16
2.220446e-16 + 3
e
exp(d)
1/(1 + exp(d))
1./(1 + exp(d))
fitted.results
1/(1 + exp(fitted.results))
plot(1/(1 + exp(fitted.results)))
plot(exp(fitted.results)/(1 + exp(fitted.results)))
ln
log
data
data$error
data$error == 1
length(data$error == 1)
length(data$error == 0)
data$error == 1
data[data$error == 1,]
data[data$error == 1,]$error
length(data[data$error == 1,]$error)
length(data[data$error == 1,]$error)
curve(fitted.results)
curve(fitted.results, add=T)
curve(model, add=T)
model
curve(model, add=T)
fitted.results <- predict(model, newdata=test, type='response')
train.data.raw <- read.csv('data/exem/machine-error01.csv', header = T)
train.data.raw <- subset(train.data.raw, select = -c(2))
data <- train.data.raw
train <- data[1:13000,]
test <- data[13001:14375,]
model = glm(formula=error~., family=binomial(link='logit'), data=train)
fitted.results <- predict(model, newdata=test, type='response')
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
mean(fitted.results == test$error)
curve(fitted.results)
curve(predict(model, newdata=test, type='resp'))
points(fitted.results$error)
points(fitted.results)
fitted.results
(model, newdata=test, type='response')
fitted.results
fitted.results <- predict(model, newdata=test, type='response')
fitted.results
fitted.results[fitted.results<= 0.5,]
fitted.results[fitted.results<= 0.5]
d <- fitted.results[fitted.results<= 0.5]
d
plot(d)
plot(fitted.results[fitted.results> 0.5])
plot(fitted.results[fitted.results< 1])
plot(fitted.results[fitted.results< 0.9])
plot(fitted.results[fitted.results< 0.2])
plot(fitted.results[fitted.results< 0.2])
plot(fitted.results[fitted.results< 0.1])
plot(fitted.results[fitted.results< 0.001])
plot(fitted.results[fitted.results< 0.0001])
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-20))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-20, 0.1))
plot(fitted.results[fitted.results< 0.0001], ylim=c(0.000000000001, 0.1))
plot(fitted.results[fitted.results< 0.0001], ylim=c(0.000000000001, 0.0001))
plot(fitted.results[fitted.results< 0.0001], ylim=c(0.000000000001, 0.0000000001))
plot(fitted.results[fitted.results< 0.0001], ylim=c(0.000000000001, 0.000000000001))
plot(fitted.results[fitted.results< 0.0001], ylim=c(0.000000000001, 0.00000000001))
plot(fitted.results[fitted.results< 0.0001], ylim=c(0.000000000001, 0.0000000001))
plot(fitted.results[fitted.results< 0.0001], ylim=c(0.0000000000001, 0.0000000001))
plot(fitted.results[fitted.results< 0.0001], ylim=c(0.00000000000001, 0.0000000001))
plot(fitted.results[fitted.results< 0.0001], ylim=c(0.000000000000001, 0.0000000001))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-9, 0.0000000001))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-9, 1e-3))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-9, 1e-9.))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-9, 1e-9))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-10, 1e-9))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-12, 1e-9))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-13, 1e-9))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-11, 1e-9))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-11, 1e-12))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-11, 1e-10))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-11, 1e-9))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-11, 1e-95))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-11, 1e-9.5))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-11, 1e-9))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-11, 1e-10))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-11, 1e-9))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-12, 1e-9))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-10, 1e-9))
plot(fitted.results[fitted.results< 0.0001], ylim=c(1e-11, 1e-9))
plot(fitted.results[fitted.results< 0.1], ylim=c(1e-11, 1e-9))
plot(fitted.results[fitted.results< 0.5], ylim=c(1e-11, 1e-9))
plot(fitted.results[fitted.results< 0.5], ylim=c(1e-11, 1e-5))
plot(fitted.results[fitted.results< 0.5], ylim=c(1e-11, 1e-5))
plot(fitted.results, ylim=c(1e-11, 1e-5))
plot(fitted.results, ylim=c(1e-11, 1e-5))
plot(fitted.results, ylim=c(1e-11, 1))
plot(1/(1+exp(fitted.results)), ylim=c(1e-11, 1))
plot(1/(1+exp(-fitted.results)), ylim=c(1e-11, 1))
plot(1/(1+exp(-fitted.results))
)
plot(1/(1+exp(-fitted.results)))
exp(1)
log(0.2/(1-0.2))
model.weights()
model$coefficients
plot(data$error)
plot(data$error)
table(data$error)
d = table(data$error)
d
d[0]
d['0']
d['1']
d['1']/length(data)
length(Data)
length(data)
length(data$error)
4375/14375
p = 4375/14375
p/1-p
p/(1-p)
log(p/(1-p))
log(p/(1-p))
plot(log(p/(1-p)))
plot(data$"CO2", data$error)
plot(data$, data$error)
head(data)
plot(data$break_pad_slide, data$error)
plot(data$error, data$break_pad_slide)
plot(data$break_pad_slide, data$error)
plot(data)
fitted(model)
plot(data$"BJsales", fitted(model))
plot(data$"BJsales", fitted(model), pch=20)
fitted(model)
plot(data$, fitted(model), pch=20)
head(data)
plot(data$break_pad_slide, fitted(model), pch=20)
plot(data$error, fitted(model), pch=20)
plot(data$error, fitted(model), pch=20)
plot(train$error, fitted(model))
plot(train$break_pad_slide, fitted(model))
plot(train$break_pad_slide, fitted(model), pch=20)
plot(train$, fitted(model), pch=20)
plot(train, fitted(model), pch=20)
head(train)
points(train$break_pad_slide, fitted(model), pch=20)
library(popbio)
library(popbio)
install.packages('popbio')
library(popbio)
logi.hist.plot(train$slide_voltage, train$error)
summary(model)
ggplot
install.packages('lattice')
library(lattice)
densityplot(model)
densityplot(model, groups=train$error)
densityplot(model, groups=train$error, auto.key=T)
log(model)
model
model$residuals
plot(model$residuals)
plot(model$fitted.values)
plot(model$effects)
plot(model$coefficients)
max(model$coefficients)
plot(model$rank)
plot(model$deviance)
model$weights
plot(model$weights)
train$error
train$error == 1
length(train$error == 1)
table(train$error)
d = table(train$error)
d['1']
d['1']/length(train)
p = d['1']/length(train)
p/(1-p)
plot(-10:10, 54)
x = -10:10
x
x = -1000:1000
x
plot(x)
plot(x, x*1.02)
plot(x, x*0.5)
plot(x, x*-0.5)
plot(x, log(x*-0.5)
)
plot(x, log(x*-0.5))
plot(x, log(x*-0.4))
plot(x, log(x*-0.5)_
plot(x, log(x*-0.5))
plot(x, log(x*-0.1))
plot(x, log(x*0.1))
plot(x, log(x))
plot(x, log(-x))
plot(x, 1/log(-x))
plot(x, 1/(1+log(-x))
)
plot(x, 1/(1+log(-x)))
plot(x, 1/(1+log(-x)))
plot(x, log(x)/(1+log(-x)))
plot(x, log(x)/(1+log(x)))
plot(x, log(x)/(1+log(x)))
range(10, 20, 0.1)
plot(x, log(x)/(1+log(x)))
r = fitted.results
r
exp(r)/(1-exp(r))
plot(exp(r)/(1-exp(r)))
plot(exp(exp(r)/(1-exp(r))))
plot(exp(r)/(1-exp(r)) * 1.056)
plot(exp(r)/(1-exp(r)) * 1.456)
plot(exp(r)/(1-exp(r)) )
plot(r)
plot(exp(r)/(1-exp(r)) )
plot(exp(r) )
plot(exp(r/1-r) )
plot(exp(r/(1-r) )
plot(exp(r/(1-r) ))
plot(exp(r/(1-r) ))
plot(log(r/(1-r) ))
plot(r)
plot(log(r/(1-r) ))
plot(5(r/(1-r) ))
plot(5^(r/(1-r) ))
plot(3.7^(r/(1-r) ))
plot(20^(r/(1-r) ))
plot(log(r/(1-r) ))
r
ifelse(fitted.results > 0.5, 1, 0)
plot(ifelse(fitted.results > 0.5, 1, 0))
table(ifelse(fitted.results > 0.5, 1, 0))
table(ifelse(test =  > 0.5, 1, 0))
table(ifelse(test => 0.5, 1, 0))
table(ifelse(test$error => 0.5, 1, 0))
table(ifelse(test$error => 0.5, 1, 0))
train$error
table(train$error)
p = predict(model, newdata=train, type='response')
p = predict(model, newdata=train.data.raw, type='response')
p = predict(model, newdata=data, type='response')
p = predict(model, newdata=train, type='response')
model = glm(formula=error~., family=binomial(link='logit'), data=train)
train.data.raw <- read.csv('data/exem/machine-error01.csv', header = T)
train.data.raw <- subset(train.data.raw, select = -c(2))
data <- train.data.raw
train <- data[1:13000,]
test <- data[13001:14375,]
model = glm(formula=error~., family=binomial(link='logit'), data=train)
model = glm(formula=error~., family=binomial(link='logit'), data=train)
model
fitted.results <- predict(model, newdata=test, type='response')
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
mean(fitted.results == test$error)
fitted.results <- predict(model, newdata=data, type='response')
mean(fitted.results == test$error)
mean(fitted.results == data$error)
fitted.results
plot(fitted.results)
plot(fitted.results[10000:15000])
x = fitted.results[10000:15000]
log(x/(1-x))
log(x/(1-x))
plot(log(x/(1-x)))
x = fitted.results[70000:15000]
x = fitted.results[7000:15000]
plot(log(x/(1-x)))
